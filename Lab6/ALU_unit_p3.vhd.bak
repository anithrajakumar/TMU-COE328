LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.all;

entity ALU_unit_p2 is
    port (
		  Reg1    : in std_logic_vector(7 downto 0);  -- 8-bit input A (from Reg1)
        Reg2    : in std_logic_vector(7 downto 0);  -- 8-bit input B (from Reg2)
        clk     : in std_logic;
        reset   : in std_logic;  -- Reset signal
        opcode  : in std_logic_vector(7 downto 0);  -- 8-bit opcode from Decoder
		  LS_result : out std_logic_vector(3 downto 0);
		  RS_result : out std_logic_vector(3 downto 0)
    );
end ALU_unit_p2;

architecture calculation of ALU_unit_p2 is
	SIGNAL Result, Temp_Reg: STD_LOGIC_VECTOR(7 DOWNTO 0) ;
begin
    process (clk, reset)
    begin
        if reset = '1' then
            Result <= "00000000";  -- Reset Result to "00000000"
        elsif (clk'EVENT AND clk = '1') then
            case opcode is
                when "00000001" => -- [1] Odd Bit Replacement -- 
                    Temp_Reg(7) <= Reg2(7);
						  Temp_Reg(6) <= Reg1(6);
						  Temp_Reg(5) <= Reg2(5);
						  Temp_Reg(4) <= Reg1(4);
						  Temp_Reg(3) <= Reg2(3);
						  Temp_Reg(2) <= Reg1(2);
						  Temp_Reg(1) <= Reg2(1);
						  Temp_Reg(0) <= Reg1(0);
						  
						  result <= Temp_Reg;
                when "00000010" => -- [2] NAND Unit --
						  result <= reg1 NAND reg2;
                when "00000100" => -- [3] (A + B - 5) Unit -- 
                    result <= (reg1 + reg2) - "00000101";
                when "00001000" => -- [4] 2's comp of B Unit
                    result <= NOT(reg2) + "00000001";
                when "00010000" => -- [5] invert even bits of B Unit --
						  Temp_Reg(7) <= Not Reg2(7);
						  Temp_Reg(6) <= (Reg2(6));
						  Temp_Reg(5) <= Not Reg2(5);
						  Temp_Reg(4) <= (Reg2(4));
						  Temp_Reg(3) <= Not Reg2(3);
						  Temp_Reg(2) <= (Reg2(2));
						  Temp_Reg(1) <= Not Reg2(1);
						  Temp_Reg(0) <= (Reg2(0));
						  
                    result <= Temp_Reg;
						  
                when "00100000" => -- [6] shifting Unit --
						  Temp_Reg <= std_logic_vector(shift_left(unsigned(reg1), 2));
						  Temp_Reg(0) <= '1';
						  Temp_Reg(1) <= '1';
                    result <= Temp_Reg;
                when "01000000" => -- [7] Null output Unit --
                    result <= NULL;
                when "10000000" => -- [8] OR Unit --
                    result <= NOT(reg1) + 00000001;
                when others =>
            end case;
        end if;
		   
			-- Spliting the result into two 4 bit results --
			LS_result <= Result(7 downto 4);
			RS_result <= Result(3 downto 0);
			
    end process;

end calculation;
