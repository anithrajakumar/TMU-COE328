// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2024 16:19:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Final_Desgin_p2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Final_Desgin_p2_vlg_sample_tst(
	clk,
	data_in,
	Enable,
	Reg_A,
	Reg_B,
	reset,
	sampler_tx
);
input  clk;
input  data_in;
input  Enable;
input [7:0] Reg_A;
input [7:0] Reg_B;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or Enable or Reg_A or Reg_B or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Final_Desgin_p2_vlg_check_tst (
	function_number,
	LS_Bin,
	LS_result,
	RS_Bin,
	RS_resultf,
	st_id_Bin,
	student_id,
	sampler_rx
);
input [7:0] function_number;
input [3:0] LS_Bin;
input [6:0] LS_result;
input [3:0] RS_Bin;
input [6:0] RS_resultf;
input [3:0] st_id_Bin;
input [6:0] student_id;
input sampler_rx;

reg [7:0] function_number_expected;
reg [3:0] LS_Bin_expected;
reg [6:0] LS_result_expected;
reg [3:0] RS_Bin_expected;
reg [6:0] RS_resultf_expected;
reg [3:0] st_id_Bin_expected;
reg [6:0] student_id_expected;

reg [7:0] function_number_prev;
reg [3:0] LS_Bin_prev;
reg [6:0] LS_result_prev;
reg [3:0] RS_Bin_prev;
reg [6:0] RS_resultf_prev;
reg [3:0] st_id_Bin_prev;
reg [6:0] student_id_prev;

reg [7:0] function_number_expected_prev;
reg [3:0] LS_Bin_expected_prev;
reg [6:0] LS_result_expected_prev;
reg [3:0] RS_Bin_expected_prev;
reg [6:0] RS_resultf_expected_prev;
reg [3:0] st_id_Bin_expected_prev;
reg [6:0] student_id_expected_prev;

reg [7:0] last_function_number_exp;
reg [3:0] last_LS_Bin_exp;
reg [6:0] last_LS_result_exp;
reg [3:0] last_RS_Bin_exp;
reg [6:0] last_RS_resultf_exp;
reg [3:0] last_st_id_Bin_exp;
reg [6:0] last_student_id_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	function_number_prev = function_number;
	LS_Bin_prev = LS_Bin;
	LS_result_prev = LS_result;
	RS_Bin_prev = RS_Bin;
	RS_resultf_prev = RS_resultf;
	st_id_Bin_prev = st_id_Bin;
	student_id_prev = student_id;
end

// update expected /o prevs

always @(trigger)
begin
	function_number_expected_prev = function_number_expected;
	LS_Bin_expected_prev = LS_Bin_expected;
	LS_result_expected_prev = LS_result_expected;
	RS_Bin_expected_prev = RS_Bin_expected;
	RS_resultf_expected_prev = RS_resultf_expected;
	st_id_Bin_expected_prev = st_id_Bin_expected;
	student_id_expected_prev = student_id_expected;
end


// expected LS_result[ 6 ]
initial
begin
	LS_result_expected[6] = 1'bX;
end 
// expected LS_result[ 5 ]
initial
begin
	LS_result_expected[5] = 1'bX;
end 
// expected LS_result[ 4 ]
initial
begin
	LS_result_expected[4] = 1'bX;
end 
// expected LS_result[ 3 ]
initial
begin
	LS_result_expected[3] = 1'bX;
end 
// expected LS_result[ 2 ]
initial
begin
	LS_result_expected[2] = 1'bX;
end 
// expected LS_result[ 1 ]
initial
begin
	LS_result_expected[1] = 1'bX;
end 
// expected LS_result[ 0 ]
initial
begin
	LS_result_expected[0] = 1'bX;
end 
// expected RS_resultf[ 6 ]
initial
begin
	RS_resultf_expected[6] = 1'bX;
end 
// expected RS_resultf[ 5 ]
initial
begin
	RS_resultf_expected[5] = 1'bX;
end 
// expected RS_resultf[ 4 ]
initial
begin
	RS_resultf_expected[4] = 1'bX;
end 
// expected RS_resultf[ 3 ]
initial
begin
	RS_resultf_expected[3] = 1'bX;
end 
// expected RS_resultf[ 2 ]
initial
begin
	RS_resultf_expected[2] = 1'bX;
end 
// expected RS_resultf[ 1 ]
initial
begin
	RS_resultf_expected[1] = 1'bX;
end 
// expected RS_resultf[ 0 ]
initial
begin
	RS_resultf_expected[0] = 1'bX;
end 
// expected student_id[ 6 ]
initial
begin
	student_id_expected[6] = 1'bX;
end 
// expected student_id[ 5 ]
initial
begin
	student_id_expected[5] = 1'bX;
end 
// expected student_id[ 4 ]
initial
begin
	student_id_expected[4] = 1'bX;
end 
// expected student_id[ 3 ]
initial
begin
	student_id_expected[3] = 1'bX;
end 
// expected student_id[ 2 ]
initial
begin
	student_id_expected[2] = 1'bX;
end 
// expected student_id[ 1 ]
initial
begin
	student_id_expected[1] = 1'bX;
end 
// expected student_id[ 0 ]
initial
begin
	student_id_expected[0] = 1'bX;
end 
// expected function_number[ 7 ]
initial
begin
	function_number_expected[7] = 1'bX;
end 
// expected function_number[ 6 ]
initial
begin
	function_number_expected[6] = 1'bX;
end 
// expected function_number[ 5 ]
initial
begin
	function_number_expected[5] = 1'bX;
end 
// expected function_number[ 4 ]
initial
begin
	function_number_expected[4] = 1'bX;
end 
// expected function_number[ 3 ]
initial
begin
	function_number_expected[3] = 1'bX;
end 
// expected function_number[ 2 ]
initial
begin
	function_number_expected[2] = 1'bX;
end 
// expected function_number[ 1 ]
initial
begin
	function_number_expected[1] = 1'bX;
end 
// expected function_number[ 0 ]
initial
begin
	function_number_expected[0] = 1'bX;
end 
// expected st_id_Bin[ 3 ]
initial
begin
	st_id_Bin_expected[3] = 1'bX;
end 
// expected st_id_Bin[ 2 ]
initial
begin
	st_id_Bin_expected[2] = 1'bX;
end 
// expected st_id_Bin[ 1 ]
initial
begin
	st_id_Bin_expected[1] = 1'bX;
end 
// expected st_id_Bin[ 0 ]
initial
begin
	st_id_Bin_expected[0] = 1'bX;
end 
// expected LS_Bin[ 3 ]
initial
begin
	LS_Bin_expected[3] = 1'bX;
end 
// expected LS_Bin[ 2 ]
initial
begin
	LS_Bin_expected[2] = 1'bX;
end 
// expected LS_Bin[ 1 ]
initial
begin
	LS_Bin_expected[1] = 1'bX;
end 
// expected LS_Bin[ 0 ]
initial
begin
	LS_Bin_expected[0] = 1'bX;
end 
// expected RS_Bin[ 3 ]
initial
begin
	RS_Bin_expected[3] = 1'bX;
end 
// expected RS_Bin[ 2 ]
initial
begin
	RS_Bin_expected[2] = 1'bX;
end 
// expected RS_Bin[ 1 ]
initial
begin
	RS_Bin_expected[1] = 1'bX;
end 
// expected RS_Bin[ 0 ]
initial
begin
	RS_Bin_expected[0] = 1'bX;
end 
// generate trigger
always @(function_number_expected or function_number or LS_Bin_expected or LS_Bin or LS_result_expected or LS_result or RS_Bin_expected or RS_Bin or RS_resultf_expected or RS_resultf or st_id_Bin_expected or st_id_Bin or student_id_expected or student_id)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected function_number = %b | expected LS_Bin = %b | expected LS_result = %b | expected RS_Bin = %b | expected RS_resultf = %b | expected st_id_Bin = %b | expected student_id = %b | ",function_number_expected_prev,LS_Bin_expected_prev,LS_result_expected_prev,RS_Bin_expected_prev,RS_resultf_expected_prev,st_id_Bin_expected_prev,student_id_expected_prev);
	$display("| real function_number = %b | real LS_Bin = %b | real LS_result = %b | real RS_Bin = %b | real RS_resultf = %b | real st_id_Bin = %b | real student_id = %b | ",function_number_prev,LS_Bin_prev,LS_result_prev,RS_Bin_prev,RS_resultf_prev,st_id_Bin_prev,student_id_prev);
`endif
	if (
		( function_number_expected_prev[0] !== 1'bx ) && ( function_number_prev[0] !== function_number_expected_prev[0] )
		&& ((function_number_expected_prev[0] !== last_function_number_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[0] = function_number_expected_prev[0];
	end
	if (
		( function_number_expected_prev[1] !== 1'bx ) && ( function_number_prev[1] !== function_number_expected_prev[1] )
		&& ((function_number_expected_prev[1] !== last_function_number_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[1] = function_number_expected_prev[1];
	end
	if (
		( function_number_expected_prev[2] !== 1'bx ) && ( function_number_prev[2] !== function_number_expected_prev[2] )
		&& ((function_number_expected_prev[2] !== last_function_number_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[2] = function_number_expected_prev[2];
	end
	if (
		( function_number_expected_prev[3] !== 1'bx ) && ( function_number_prev[3] !== function_number_expected_prev[3] )
		&& ((function_number_expected_prev[3] !== last_function_number_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[3] = function_number_expected_prev[3];
	end
	if (
		( function_number_expected_prev[4] !== 1'bx ) && ( function_number_prev[4] !== function_number_expected_prev[4] )
		&& ((function_number_expected_prev[4] !== last_function_number_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[4] = function_number_expected_prev[4];
	end
	if (
		( function_number_expected_prev[5] !== 1'bx ) && ( function_number_prev[5] !== function_number_expected_prev[5] )
		&& ((function_number_expected_prev[5] !== last_function_number_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[5] = function_number_expected_prev[5];
	end
	if (
		( function_number_expected_prev[6] !== 1'bx ) && ( function_number_prev[6] !== function_number_expected_prev[6] )
		&& ((function_number_expected_prev[6] !== last_function_number_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[6] = function_number_expected_prev[6];
	end
	if (
		( function_number_expected_prev[7] !== 1'bx ) && ( function_number_prev[7] !== function_number_expected_prev[7] )
		&& ((function_number_expected_prev[7] !== last_function_number_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port function_number[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", function_number_expected_prev);
		$display ("     Real value = %b", function_number_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_function_number_exp[7] = function_number_expected_prev[7];
	end
	if (
		( LS_Bin_expected_prev[0] !== 1'bx ) && ( LS_Bin_prev[0] !== LS_Bin_expected_prev[0] )
		&& ((LS_Bin_expected_prev[0] !== last_LS_Bin_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_Bin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_Bin_expected_prev);
		$display ("     Real value = %b", LS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LS_Bin_exp[0] = LS_Bin_expected_prev[0];
	end
	if (
		( LS_Bin_expected_prev[1] !== 1'bx ) && ( LS_Bin_prev[1] !== LS_Bin_expected_prev[1] )
		&& ((LS_Bin_expected_prev[1] !== last_LS_Bin_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_Bin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_Bin_expected_prev);
		$display ("     Real value = %b", LS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LS_Bin_exp[1] = LS_Bin_expected_prev[1];
	end
	if (
		( LS_Bin_expected_prev[2] !== 1'bx ) && ( LS_Bin_prev[2] !== LS_Bin_expected_prev[2] )
		&& ((LS_Bin_expected_prev[2] !== last_LS_Bin_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_Bin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_Bin_expected_prev);
		$display ("     Real value = %b", LS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LS_Bin_exp[2] = LS_Bin_expected_prev[2];
	end
	if (
		( LS_Bin_expected_prev[3] !== 1'bx ) && ( LS_Bin_prev[3] !== LS_Bin_expected_prev[3] )
		&& ((LS_Bin_expected_prev[3] !== last_LS_Bin_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_Bin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_Bin_expected_prev);
		$display ("     Real value = %b", LS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LS_Bin_exp[3] = LS_Bin_expected_prev[3];
	end
	if (
		( LS_result_expected_prev[0] !== 1'bx ) && ( LS_result_prev[0] !== LS_result_expected_prev[0] )
		&& ((LS_result_expected_prev[0] !== last_LS_result_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[0] = LS_result_expected_prev[0];
	end
	if (
		( LS_result_expected_prev[1] !== 1'bx ) && ( LS_result_prev[1] !== LS_result_expected_prev[1] )
		&& ((LS_result_expected_prev[1] !== last_LS_result_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[1] = LS_result_expected_prev[1];
	end
	if (
		( LS_result_expected_prev[2] !== 1'bx ) && ( LS_result_prev[2] !== LS_result_expected_prev[2] )
		&& ((LS_result_expected_prev[2] !== last_LS_result_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[2] = LS_result_expected_prev[2];
	end
	if (
		( LS_result_expected_prev[3] !== 1'bx ) && ( LS_result_prev[3] !== LS_result_expected_prev[3] )
		&& ((LS_result_expected_prev[3] !== last_LS_result_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[3] = LS_result_expected_prev[3];
	end
	if (
		( LS_result_expected_prev[4] !== 1'bx ) && ( LS_result_prev[4] !== LS_result_expected_prev[4] )
		&& ((LS_result_expected_prev[4] !== last_LS_result_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[4] = LS_result_expected_prev[4];
	end
	if (
		( LS_result_expected_prev[5] !== 1'bx ) && ( LS_result_prev[5] !== LS_result_expected_prev[5] )
		&& ((LS_result_expected_prev[5] !== last_LS_result_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[5] = LS_result_expected_prev[5];
	end
	if (
		( LS_result_expected_prev[6] !== 1'bx ) && ( LS_result_prev[6] !== LS_result_expected_prev[6] )
		&& ((LS_result_expected_prev[6] !== last_LS_result_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_result_expected_prev);
		$display ("     Real value = %b", LS_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LS_result_exp[6] = LS_result_expected_prev[6];
	end
	if (
		( RS_Bin_expected_prev[0] !== 1'bx ) && ( RS_Bin_prev[0] !== RS_Bin_expected_prev[0] )
		&& ((RS_Bin_expected_prev[0] !== last_RS_Bin_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_Bin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_Bin_expected_prev);
		$display ("     Real value = %b", RS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RS_Bin_exp[0] = RS_Bin_expected_prev[0];
	end
	if (
		( RS_Bin_expected_prev[1] !== 1'bx ) && ( RS_Bin_prev[1] !== RS_Bin_expected_prev[1] )
		&& ((RS_Bin_expected_prev[1] !== last_RS_Bin_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_Bin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_Bin_expected_prev);
		$display ("     Real value = %b", RS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RS_Bin_exp[1] = RS_Bin_expected_prev[1];
	end
	if (
		( RS_Bin_expected_prev[2] !== 1'bx ) && ( RS_Bin_prev[2] !== RS_Bin_expected_prev[2] )
		&& ((RS_Bin_expected_prev[2] !== last_RS_Bin_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_Bin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_Bin_expected_prev);
		$display ("     Real value = %b", RS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RS_Bin_exp[2] = RS_Bin_expected_prev[2];
	end
	if (
		( RS_Bin_expected_prev[3] !== 1'bx ) && ( RS_Bin_prev[3] !== RS_Bin_expected_prev[3] )
		&& ((RS_Bin_expected_prev[3] !== last_RS_Bin_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_Bin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_Bin_expected_prev);
		$display ("     Real value = %b", RS_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RS_Bin_exp[3] = RS_Bin_expected_prev[3];
	end
	if (
		( RS_resultf_expected_prev[0] !== 1'bx ) && ( RS_resultf_prev[0] !== RS_resultf_expected_prev[0] )
		&& ((RS_resultf_expected_prev[0] !== last_RS_resultf_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[0] = RS_resultf_expected_prev[0];
	end
	if (
		( RS_resultf_expected_prev[1] !== 1'bx ) && ( RS_resultf_prev[1] !== RS_resultf_expected_prev[1] )
		&& ((RS_resultf_expected_prev[1] !== last_RS_resultf_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[1] = RS_resultf_expected_prev[1];
	end
	if (
		( RS_resultf_expected_prev[2] !== 1'bx ) && ( RS_resultf_prev[2] !== RS_resultf_expected_prev[2] )
		&& ((RS_resultf_expected_prev[2] !== last_RS_resultf_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[2] = RS_resultf_expected_prev[2];
	end
	if (
		( RS_resultf_expected_prev[3] !== 1'bx ) && ( RS_resultf_prev[3] !== RS_resultf_expected_prev[3] )
		&& ((RS_resultf_expected_prev[3] !== last_RS_resultf_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[3] = RS_resultf_expected_prev[3];
	end
	if (
		( RS_resultf_expected_prev[4] !== 1'bx ) && ( RS_resultf_prev[4] !== RS_resultf_expected_prev[4] )
		&& ((RS_resultf_expected_prev[4] !== last_RS_resultf_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[4] = RS_resultf_expected_prev[4];
	end
	if (
		( RS_resultf_expected_prev[5] !== 1'bx ) && ( RS_resultf_prev[5] !== RS_resultf_expected_prev[5] )
		&& ((RS_resultf_expected_prev[5] !== last_RS_resultf_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[5] = RS_resultf_expected_prev[5];
	end
	if (
		( RS_resultf_expected_prev[6] !== 1'bx ) && ( RS_resultf_prev[6] !== RS_resultf_expected_prev[6] )
		&& ((RS_resultf_expected_prev[6] !== last_RS_resultf_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_resultf[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_resultf_expected_prev);
		$display ("     Real value = %b", RS_resultf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RS_resultf_exp[6] = RS_resultf_expected_prev[6];
	end
	if (
		( st_id_Bin_expected_prev[0] !== 1'bx ) && ( st_id_Bin_prev[0] !== st_id_Bin_expected_prev[0] )
		&& ((st_id_Bin_expected_prev[0] !== last_st_id_Bin_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port st_id_Bin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", st_id_Bin_expected_prev);
		$display ("     Real value = %b", st_id_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_st_id_Bin_exp[0] = st_id_Bin_expected_prev[0];
	end
	if (
		( st_id_Bin_expected_prev[1] !== 1'bx ) && ( st_id_Bin_prev[1] !== st_id_Bin_expected_prev[1] )
		&& ((st_id_Bin_expected_prev[1] !== last_st_id_Bin_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port st_id_Bin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", st_id_Bin_expected_prev);
		$display ("     Real value = %b", st_id_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_st_id_Bin_exp[1] = st_id_Bin_expected_prev[1];
	end
	if (
		( st_id_Bin_expected_prev[2] !== 1'bx ) && ( st_id_Bin_prev[2] !== st_id_Bin_expected_prev[2] )
		&& ((st_id_Bin_expected_prev[2] !== last_st_id_Bin_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port st_id_Bin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", st_id_Bin_expected_prev);
		$display ("     Real value = %b", st_id_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_st_id_Bin_exp[2] = st_id_Bin_expected_prev[2];
	end
	if (
		( st_id_Bin_expected_prev[3] !== 1'bx ) && ( st_id_Bin_prev[3] !== st_id_Bin_expected_prev[3] )
		&& ((st_id_Bin_expected_prev[3] !== last_st_id_Bin_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port st_id_Bin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", st_id_Bin_expected_prev);
		$display ("     Real value = %b", st_id_Bin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_st_id_Bin_exp[3] = st_id_Bin_expected_prev[3];
	end
	if (
		( student_id_expected_prev[0] !== 1'bx ) && ( student_id_prev[0] !== student_id_expected_prev[0] )
		&& ((student_id_expected_prev[0] !== last_student_id_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[0] = student_id_expected_prev[0];
	end
	if (
		( student_id_expected_prev[1] !== 1'bx ) && ( student_id_prev[1] !== student_id_expected_prev[1] )
		&& ((student_id_expected_prev[1] !== last_student_id_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[1] = student_id_expected_prev[1];
	end
	if (
		( student_id_expected_prev[2] !== 1'bx ) && ( student_id_prev[2] !== student_id_expected_prev[2] )
		&& ((student_id_expected_prev[2] !== last_student_id_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[2] = student_id_expected_prev[2];
	end
	if (
		( student_id_expected_prev[3] !== 1'bx ) && ( student_id_prev[3] !== student_id_expected_prev[3] )
		&& ((student_id_expected_prev[3] !== last_student_id_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[3] = student_id_expected_prev[3];
	end
	if (
		( student_id_expected_prev[4] !== 1'bx ) && ( student_id_prev[4] !== student_id_expected_prev[4] )
		&& ((student_id_expected_prev[4] !== last_student_id_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[4] = student_id_expected_prev[4];
	end
	if (
		( student_id_expected_prev[5] !== 1'bx ) && ( student_id_prev[5] !== student_id_expected_prev[5] )
		&& ((student_id_expected_prev[5] !== last_student_id_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[5] = student_id_expected_prev[5];
	end
	if (
		( student_id_expected_prev[6] !== 1'bx ) && ( student_id_prev[6] !== student_id_expected_prev[6] )
		&& ((student_id_expected_prev[6] !== last_student_id_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_student_id_exp[6] = student_id_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#640000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Final_Desgin_p2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_in;
reg Enable;
reg [7:0] Reg_A;
reg [7:0] Reg_B;
reg reset;
// wires                                               
wire [7:0] function_number;
wire [3:0] LS_Bin;
wire [6:0] LS_result;
wire [3:0] RS_Bin;
wire [6:0] RS_resultf;
wire [3:0] st_id_Bin;
wire [6:0] student_id;

wire sampler;                             

// assign statements (if any)                          
Final_Desgin_p2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.Enable(Enable),
	.function_number(function_number),
	.LS_Bin(LS_Bin),
	.LS_result(LS_result),
	.Reg_A(Reg_A),
	.Reg_B(Reg_B),
	.reset(reset),
	.RS_Bin(RS_Bin),
	.RS_resultf(RS_resultf),
	.st_id_Bin(st_id_Bin),
	.student_id(student_id)
);

// clk
initial
begin
	clk = 1'b1;
	# 20000;
	repeat(15)
	begin
		clk = 1'b0;
		clk = #20000 1'b1;
		# 20000;
	end
	clk = 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
end 
// Reg_A[ 7 ]
initial
begin
	Reg_A[7] = 1'b0;
end 
// Reg_A[ 6 ]
initial
begin
	Reg_A[6] = 1'b1;
end 
// Reg_A[ 5 ]
initial
begin
	Reg_A[5] = 1'b0;
end 
// Reg_A[ 4 ]
initial
begin
	Reg_A[4] = 1'b0;
end 
// Reg_A[ 3 ]
initial
begin
	Reg_A[3] = 1'b0;
end 
// Reg_A[ 2 ]
initial
begin
	Reg_A[2] = 1'b1;
end 
// Reg_A[ 1 ]
initial
begin
	Reg_A[1] = 1'b0;
end 
// Reg_A[ 0 ]
initial
begin
	Reg_A[0] = 1'b1;
end 
// Reg_B[ 7 ]
initial
begin
	Reg_B[7] = 1'b0;
end 
// Reg_B[ 6 ]
initial
begin
	Reg_B[6] = 1'b0;
end 
// Reg_B[ 5 ]
initial
begin
	Reg_B[5] = 1'b1;
end 
// Reg_B[ 4 ]
initial
begin
	Reg_B[4] = 1'b0;
end 
// Reg_B[ 3 ]
initial
begin
	Reg_B[3] = 1'b1;
end 
// Reg_B[ 2 ]
initial
begin
	Reg_B[2] = 1'b0;
end 
// Reg_B[ 1 ]
initial
begin
	Reg_B[1] = 1'b0;
end 
// Reg_B[ 0 ]
initial
begin
	Reg_B[0] = 1'b0;
end 

Final_Desgin_p2_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.Enable(Enable),
	.Reg_A(Reg_A),
	.Reg_B(Reg_B),
	.reset(reset),
	.sampler_tx(sampler)
);

Final_Desgin_p2_vlg_check_tst tb_out(
	.function_number(function_number),
	.LS_Bin(LS_Bin),
	.LS_result(LS_result),
	.RS_Bin(RS_Bin),
	.RS_resultf(RS_resultf),
	.st_id_Bin(st_id_Bin),
	.student_id(student_id),
	.sampler_rx(sampler)
);
endmodule

